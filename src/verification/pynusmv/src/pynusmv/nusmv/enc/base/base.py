# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_base')
    _base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base', [dirname(__file__)])
        except ImportError:
            import _base
            return _base
        try:
            _mod = imp.load_module('_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _base = swig_import_helper()
    del swig_import_helper
else:
    import _base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _base.PRIuPTR
PRIdPTR = _base.PRIdPTR
LLU = _base.LLU
LLO = _base.LLO
LLX = _base.LLX
false = _base.false
true = _base.true
OUTCOME_GENERIC_ERROR = _base.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _base.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _base.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _base.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _base.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _base.OUTCOME_SUCCESS

def Object_destroy(arg1: 'Object_ptr', arg: 'void *') -> "void":
    """Object_destroy(Object_ptr arg1, void * arg)"""
    return _base.Object_destroy(arg1, arg)

def Object_copy(arg1: 'Object_ptr const') -> "Object_ptr":
    """Object_copy(Object_ptr const arg1) -> Object_ptr"""
    return _base.Object_copy(arg1)

def BaseEnc_get_symb_table(arg1: 'BaseEnc_ptr const') -> "SymbTable_ptr":
    """BaseEnc_get_symb_table(BaseEnc_ptr const arg1) -> SymbTable_ptr"""
    return _base.BaseEnc_get_symb_table(arg1)

def BaseEnc_get_type_checker(arg1: 'BaseEnc_ptr const') -> "TypeChecker_ptr":
    """BaseEnc_get_type_checker(BaseEnc_ptr const arg1) -> TypeChecker_ptr"""
    return _base.BaseEnc_get_type_checker(arg1)

def BaseEnc_layer_occurs(arg1: 'BaseEnc_ptr const', layer_name: 'char const *') -> "boolean":
    """BaseEnc_layer_occurs(BaseEnc_ptr const arg1, char const * layer_name) -> boolean"""
    return _base.BaseEnc_layer_occurs(arg1, layer_name)

def BaseEnc_get_committed_layers(arg1: 'BaseEnc_ptr const') -> "NodeList_ptr":
    """BaseEnc_get_committed_layers(BaseEnc_ptr const arg1) -> NodeList_ptr"""
    return _base.BaseEnc_get_committed_layers(arg1)

def BaseEnc_get_committed_layer_names(arg1: 'BaseEnc_ptr') -> "array_t const *":
    """BaseEnc_get_committed_layer_names(BaseEnc_ptr arg1) -> array_t const *"""
    return _base.BaseEnc_get_committed_layer_names(arg1)

def BaseEnc_destroy(arg1: 'BaseEnc_ptr') -> "void":
    """BaseEnc_destroy(BaseEnc_ptr arg1)"""
    return _base.BaseEnc_destroy(arg1)

def BaseEnc_commit_layer(arg1: 'BaseEnc_ptr', layer_name: 'char const *') -> "void":
    """BaseEnc_commit_layer(BaseEnc_ptr arg1, char const * layer_name)"""
    return _base.BaseEnc_commit_layer(arg1, layer_name)

def BaseEnc_remove_layer(arg1: 'BaseEnc_ptr', layer_name: 'char const *') -> "void":
    """BaseEnc_remove_layer(BaseEnc_ptr arg1, char const * layer_name)"""
    return _base.BaseEnc_remove_layer(arg1, layer_name)

def BoolEncClient_get_bool_enc(arg1: 'BoolEncClient_ptr const') -> "BoolEnc_ptr":
    """BoolEncClient_get_bool_enc(BoolEncClient_ptr const arg1) -> BoolEnc_ptr"""
    return _base.BoolEncClient_get_bool_enc(arg1)

def BoolEncClient_destroy(arg1: 'BoolEncClient_ptr') -> "void":
    """BoolEncClient_destroy(BoolEncClient_ptr arg1)"""
    return _base.BoolEncClient_destroy(arg1)
# This file is compatible with both classic and new-style classes.


