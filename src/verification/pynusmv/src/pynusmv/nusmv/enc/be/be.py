# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_be')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_be')
    _be = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_be', [dirname(__file__)])
        except ImportError:
            import _be
            return _be
        try:
            _mod = imp.load_module('_be', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _be = swig_import_helper()
    del swig_import_helper
else:
    import _be
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _be.PRIuPTR
PRIdPTR = _be.PRIdPTR
LLU = _be.LLU
LLO = _be.LLO
LLX = _be.LLX
false = _be.false
true = _be.true
OUTCOME_GENERIC_ERROR = _be.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _be.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _be.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _be.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _be.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _be.OUTCOME_SUCCESS

def Object_destroy(arg1: 'Object_ptr', arg: 'void *') -> "void":
    """Object_destroy(Object_ptr arg1, void * arg)"""
    return _be.Object_destroy(arg1, arg)

def Object_copy(arg1: 'Object_ptr const') -> "Object_ptr":
    """Object_copy(Object_ptr const arg1) -> Object_ptr"""
    return _be.Object_copy(arg1)
BE_CURRENT_UNTIMED = _be.BE_CURRENT_UNTIMED
BE_VAR_TYPE_CURR = _be.BE_VAR_TYPE_CURR
BE_VAR_TYPE_FROZEN = _be.BE_VAR_TYPE_FROZEN
BE_VAR_TYPE_INPUT = _be.BE_VAR_TYPE_INPUT
BE_VAR_TYPE_NEXT = _be.BE_VAR_TYPE_NEXT
BE_VAR_TYPE_ALL = _be.BE_VAR_TYPE_ALL
BE_VAR_TYPE_ERROR = _be.BE_VAR_TYPE_ERROR

def BeEnc_create(symb_table: 'SymbTable_ptr', bool_enc: 'BoolEnc_ptr') -> "BeEnc_ptr":
    """BeEnc_create(SymbTable_ptr symb_table, BoolEnc_ptr bool_enc) -> BeEnc_ptr"""
    return _be.BeEnc_create(symb_table, bool_enc)

def BeEnc_destroy(arg1: 'BeEnc_ptr') -> "void":
    """BeEnc_destroy(BeEnc_ptr arg1)"""
    return _be.BeEnc_destroy(arg1)

def BeEnc_get_be_manager(arg1: 'BeEnc_ptr const') -> "Be_Manager_ptr":
    """BeEnc_get_be_manager(BeEnc_ptr const arg1) -> Be_Manager_ptr"""
    return _be.BeEnc_get_be_manager(arg1)

def BeEnc_get_state_vars_num(arg1: 'BeEnc_ptr const') -> "int":
    """BeEnc_get_state_vars_num(BeEnc_ptr const arg1) -> int"""
    return _be.BeEnc_get_state_vars_num(arg1)

def BeEnc_get_frozen_vars_num(arg1: 'BeEnc_ptr const') -> "int":
    """BeEnc_get_frozen_vars_num(BeEnc_ptr const arg1) -> int"""
    return _be.BeEnc_get_frozen_vars_num(arg1)

def BeEnc_get_input_vars_num(arg1: 'BeEnc_ptr const') -> "int":
    """BeEnc_get_input_vars_num(BeEnc_ptr const arg1) -> int"""
    return _be.BeEnc_get_input_vars_num(arg1)

def BeEnc_get_vars_num(arg1: 'BeEnc_ptr const') -> "int":
    """BeEnc_get_vars_num(BeEnc_ptr const arg1) -> int"""
    return _be.BeEnc_get_vars_num(arg1)

def BeEnc_get_max_time(arg1: 'BeEnc_ptr const') -> "int":
    """BeEnc_get_max_time(BeEnc_ptr const arg1) -> int"""
    return _be.BeEnc_get_max_time(arg1)

def BeEnc_name_to_untimed(arg1: 'BeEnc_ptr const', var_name: 'node_ptr const') -> "be_ptr":
    """BeEnc_name_to_untimed(BeEnc_ptr const arg1, node_ptr const var_name) -> be_ptr"""
    return _be.BeEnc_name_to_untimed(arg1, var_name)

def BeEnc_name_to_index(arg1: 'BeEnc_ptr const', name: 'node_ptr const') -> "int":
    """BeEnc_name_to_index(BeEnc_ptr const arg1, node_ptr const name) -> int"""
    return _be.BeEnc_name_to_index(arg1, name)

def BeEnc_name_to_timed(arg1: 'BeEnc_ptr const', name: 'node_ptr const', time: 'int const') -> "be_ptr":
    """BeEnc_name_to_timed(BeEnc_ptr const arg1, node_ptr const name, int const time) -> be_ptr"""
    return _be.BeEnc_name_to_timed(arg1, name, time)

def BeEnc_index_to_name(arg1: 'BeEnc_ptr const', index: 'int const') -> "node_ptr":
    """BeEnc_index_to_name(BeEnc_ptr const arg1, int const index) -> node_ptr"""
    return _be.BeEnc_index_to_name(arg1, index)

def BeEnc_index_to_var(arg1: 'BeEnc_ptr const', index: 'int const') -> "be_ptr":
    """BeEnc_index_to_var(BeEnc_ptr const arg1, int const index) -> be_ptr"""
    return _be.BeEnc_index_to_var(arg1, index)

def BeEnc_index_to_timed(arg1: 'BeEnc_ptr const', index: 'int const', time: 'int const') -> "be_ptr":
    """BeEnc_index_to_timed(BeEnc_ptr const arg1, int const index, int const time) -> be_ptr"""
    return _be.BeEnc_index_to_timed(arg1, index, time)

def BeEnc_index_to_time(arg1: 'BeEnc_ptr const', index: 'int const') -> "int":
    """BeEnc_index_to_time(BeEnc_ptr const arg1, int const index) -> int"""
    return _be.BeEnc_index_to_time(arg1, index)

def BeEnc_index_to_untimed_index(arg1: 'BeEnc_ptr const', index: 'int const') -> "int":
    """BeEnc_index_to_untimed_index(BeEnc_ptr const arg1, int const index) -> int"""
    return _be.BeEnc_index_to_untimed_index(arg1, index)

def BeEnc_var_to_name(arg1: 'BeEnc_ptr const', be_var: 'be_ptr') -> "node_ptr":
    """BeEnc_var_to_name(BeEnc_ptr const arg1, be_ptr be_var) -> node_ptr"""
    return _be.BeEnc_var_to_name(arg1, be_var)

def BeEnc_var_to_index(arg1: 'BeEnc_ptr const', var: 'be_ptr const') -> "int":
    """BeEnc_var_to_index(BeEnc_ptr const arg1, be_ptr const var) -> int"""
    return _be.BeEnc_var_to_index(arg1, var)

def BeEnc_var_to_timed(arg1: 'BeEnc_ptr const', var: 'be_ptr const', time: 'int const') -> "be_ptr":
    """BeEnc_var_to_timed(BeEnc_ptr const arg1, be_ptr const var, int const time) -> be_ptr"""
    return _be.BeEnc_var_to_timed(arg1, var, time)

def BeEnc_var_to_untimed(arg1: 'BeEnc_ptr const', var: 'be_ptr const') -> "be_ptr":
    """BeEnc_var_to_untimed(BeEnc_ptr const arg1, be_ptr const var) -> be_ptr"""
    return _be.BeEnc_var_to_untimed(arg1, var)

def BeEnc_var_curr_to_next(arg1: 'BeEnc_ptr const', curr: 'be_ptr const') -> "be_ptr":
    """BeEnc_var_curr_to_next(BeEnc_ptr const arg1, be_ptr const curr) -> be_ptr"""
    return _be.BeEnc_var_curr_to_next(arg1, curr)

def BeEnc_var_next_to_curr(arg1: 'BeEnc_ptr const', next: 'be_ptr const') -> "be_ptr":
    """BeEnc_var_next_to_curr(BeEnc_ptr const arg1, be_ptr const next) -> be_ptr"""
    return _be.BeEnc_var_next_to_curr(arg1, next)

def BeEnc_shift_curr_to_next(arg1: 'BeEnc_ptr', exp: 'be_ptr const') -> "be_ptr":
    """BeEnc_shift_curr_to_next(BeEnc_ptr arg1, be_ptr const exp) -> be_ptr"""
    return _be.BeEnc_shift_curr_to_next(arg1, exp)

def BeEnc_untimed_expr_to_timed(arg1: 'BeEnc_ptr', exp: 'be_ptr const', time: 'int const') -> "be_ptr":
    """BeEnc_untimed_expr_to_timed(BeEnc_ptr arg1, be_ptr const exp, int const time) -> be_ptr"""
    return _be.BeEnc_untimed_expr_to_timed(arg1, exp, time)

def BeEnc_untimed_expr_to_times(arg1: 'BeEnc_ptr', exp: 'be_ptr const', ctime: 'int const', ftime: 'int const', itime: 'int const', ntime: 'int const') -> "be_ptr":
    """BeEnc_untimed_expr_to_times(BeEnc_ptr arg1, be_ptr const exp, int const ctime, int const ftime, int const itime, int const ntime) -> be_ptr"""
    return _be.BeEnc_untimed_expr_to_times(arg1, exp, ctime, ftime, itime, ntime)

def BeEnc_untimed_to_timed_and_interval(arg1: 'BeEnc_ptr', exp: 'be_ptr const', arg3: 'int const', to: 'int const') -> "be_ptr":
    """BeEnc_untimed_to_timed_and_interval(BeEnc_ptr arg1, be_ptr const exp, int const arg3, int const to) -> be_ptr"""
    return _be.BeEnc_untimed_to_timed_and_interval(arg1, exp, arg3, to)

def BeEnc_untimed_to_timed_or_interval(arg1: 'BeEnc_ptr', exp: 'be_ptr const', arg3: 'int const', to: 'int const') -> "be_ptr":
    """BeEnc_untimed_to_timed_or_interval(BeEnc_ptr arg1, be_ptr const exp, int const arg3, int const to) -> be_ptr"""
    return _be.BeEnc_untimed_to_timed_or_interval(arg1, exp, arg3, to)

def BeEnc_is_index_state_var(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_state_var(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_state_var(arg1, index)

def BeEnc_is_index_frozen_var(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_frozen_var(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_frozen_var(arg1, index)

def BeEnc_is_index_input_var(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_input_var(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_input_var(arg1, index)

def BeEnc_is_index_untimed(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed(arg1, index)

def BeEnc_is_index_untimed_curr(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed_curr(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_curr(arg1, index)

def BeEnc_is_index_untimed_frozen(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed_frozen(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_frozen(arg1, index)

def BeEnc_is_index_untimed_input(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed_input(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_input(arg1, index)

def BeEnc_is_index_untimed_curr_frozen_input(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed_curr_frozen_input(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_curr_frozen_input(arg1, index)

def BeEnc_is_index_untimed_next(arg1: 'BeEnc_ptr const', index: 'int const') -> "boolean":
    """BeEnc_is_index_untimed_next(BeEnc_ptr const arg1, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_next(arg1, index)

def BeEnc_get_first_untimed_var_index(arg1: 'BeEnc_ptr const', type: 'BeVarType') -> "int":
    """BeEnc_get_first_untimed_var_index(BeEnc_ptr const arg1, BeVarType type) -> int"""
    return _be.BeEnc_get_first_untimed_var_index(arg1, type)

def BeEnc_get_next_var_index(arg1: 'BeEnc_ptr const', var_index: 'int', type: 'BeVarType') -> "int":
    """BeEnc_get_next_var_index(BeEnc_ptr const arg1, int var_index, BeVarType type) -> int"""
    return _be.BeEnc_get_next_var_index(arg1, var_index, type)

def BeEnc_get_var_index_with_offset(arg1: 'BeEnc_ptr const', from_index: 'int', offset: 'int', type: 'BeVarType') -> "int":
    """BeEnc_get_var_index_with_offset(BeEnc_ptr const arg1, int from_index, int offset, BeVarType type) -> int"""
    return _be.BeEnc_get_var_index_with_offset(arg1, from_index, offset, type)

def BeEnc_is_var_index_valid(arg1: 'BeEnc_ptr const', var_index: 'int') -> "boolean":
    """BeEnc_is_var_index_valid(BeEnc_ptr const arg1, int var_index) -> boolean"""
    return _be.BeEnc_is_var_index_valid(arg1, var_index)
# This file is compatible with both classic and new-style classes.


