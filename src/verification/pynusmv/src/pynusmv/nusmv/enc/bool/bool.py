# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bool')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bool')
    _bool = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bool', [dirname(__file__)])
        except ImportError:
            import _bool
            return _bool
        try:
            _mod = imp.load_module('_bool', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bool = swig_import_helper()
    del swig_import_helper
else:
    import _bool
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def boolenc2baseenc(bool_enc: 'BoolEnc_ptr') -> "BaseEnc_ptr":
    """boolenc2baseenc(BoolEnc_ptr bool_enc) -> BaseEnc_ptr"""
    return _bool.boolenc2baseenc(bool_enc)
PRIuPTR = _bool.PRIuPTR
PRIdPTR = _bool.PRIdPTR
LLU = _bool.LLU
LLO = _bool.LLO
LLX = _bool.LLX
false = _bool.false
true = _bool.true
OUTCOME_GENERIC_ERROR = _bool.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _bool.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _bool.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _bool.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _bool.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _bool.OUTCOME_SUCCESS

def Object_destroy(arg1: 'Object_ptr', arg: 'void *') -> "void":
    """Object_destroy(Object_ptr arg1, void * arg)"""
    return _bool.Object_destroy(arg1, arg)

def Object_copy(arg1: 'Object_ptr const') -> "Object_ptr":
    """Object_copy(Object_ptr const arg1) -> Object_ptr"""
    return _bool.Object_copy(arg1)
BIT_VALUE_FALSE = _bool.BIT_VALUE_FALSE
BIT_VALUE_TRUE = _bool.BIT_VALUE_TRUE
BIT_VALUE_DONTCARE = _bool.BIT_VALUE_DONTCARE

def BitValues_create(enc: 'struct BoolEnc_TAG *', var: 'node_ptr') -> "BitValues_ptr":
    """BitValues_create(struct BoolEnc_TAG * enc, node_ptr var) -> BitValues_ptr"""
    return _bool.BitValues_create(enc, var)

def BitValues_destroy(arg1: 'BitValues_ptr') -> "void":
    """BitValues_destroy(BitValues_ptr arg1)"""
    return _bool.BitValues_destroy(arg1)

def BitValues_get_scalar_var(arg1: 'BitValues_ptr const') -> "node_ptr":
    """BitValues_get_scalar_var(BitValues_ptr const arg1) -> node_ptr"""
    return _bool.BitValues_get_scalar_var(arg1)

def BitValues_get_size(arg1: 'BitValues_ptr const') -> "size_t":
    """BitValues_get_size(BitValues_ptr const arg1) -> size_t"""
    return _bool.BitValues_get_size(arg1)

def BitValues_get_bits(arg1: 'BitValues_ptr const') -> "NodeList_ptr":
    """BitValues_get_bits(BitValues_ptr const arg1) -> NodeList_ptr"""
    return _bool.BitValues_get_bits(arg1)

def BitValues_reset(arg1: 'BitValues_ptr') -> "void":
    """BitValues_reset(BitValues_ptr arg1)"""
    return _bool.BitValues_reset(arg1)

def BitValues_get(arg1: 'BitValues_ptr const', index: 'size_t') -> "BitValue":
    """BitValues_get(BitValues_ptr const arg1, size_t index) -> BitValue"""
    return _bool.BitValues_get(arg1, index)

def BitValues_get_value_from_expr(arg1: 'BitValues_ptr const', expr: 'node_ptr') -> "BitValue":
    """BitValues_get_value_from_expr(BitValues_ptr const arg1, node_ptr expr) -> BitValue"""
    return _bool.BitValues_get_value_from_expr(arg1, expr)

def BitValues_set(arg1: 'BitValues_ptr', index: 'size_t', val: 'BitValue') -> "void":
    """BitValues_set(BitValues_ptr arg1, size_t index, BitValue val)"""
    return _bool.BitValues_set(arg1, index, val)

def BitValues_set_from_expr(arg1: 'BitValues_ptr', index: 'size_t', expr: 'node_ptr') -> "void":
    """BitValues_set_from_expr(BitValues_ptr arg1, size_t index, node_ptr expr)"""
    return _bool.BitValues_set_from_expr(arg1, index, expr)

def BitValues_set_from_values_list(arg1: 'BitValues_ptr', enc: 'struct BoolEnc_TAG *', vals: 'node_ptr') -> "void":
    """BitValues_set_from_values_list(BitValues_ptr arg1, struct BoolEnc_TAG * enc, node_ptr vals)"""
    return _bool.BitValues_set_from_values_list(arg1, enc, vals)

def BoolEnc_create(symb_table: 'SymbTable_ptr') -> "BoolEnc_ptr":
    """BoolEnc_create(SymbTable_ptr symb_table) -> BoolEnc_ptr"""
    return _bool.BoolEnc_create(symb_table)

def BoolEnc_destroy(arg1: 'BoolEnc_ptr') -> "void":
    """BoolEnc_destroy(BoolEnc_ptr arg1)"""
    return _bool.BoolEnc_destroy(arg1)

def BoolEnc_is_var_bit(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "boolean":
    """BoolEnc_is_var_bit(BoolEnc_ptr const arg1, node_ptr name) -> boolean"""
    return _bool.BoolEnc_is_var_bit(arg1, name)

def BoolEnc_is_var_scalar(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "boolean":
    """BoolEnc_is_var_scalar(BoolEnc_ptr const arg1, node_ptr name) -> boolean"""
    return _bool.BoolEnc_is_var_scalar(arg1, name)

def BoolEnc_get_scalar_var_from_bit(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "node_ptr":
    """BoolEnc_get_scalar_var_from_bit(BoolEnc_ptr const arg1, node_ptr name) -> node_ptr"""
    return _bool.BoolEnc_get_scalar_var_from_bit(arg1, name)

def BoolEnc_make_var_bit(arg1: 'BoolEnc_ptr const', name: 'node_ptr', index: 'int') -> "node_ptr":
    """BoolEnc_make_var_bit(BoolEnc_ptr const arg1, node_ptr name, int index) -> node_ptr"""
    return _bool.BoolEnc_make_var_bit(arg1, name, index)

def BoolEnc_get_index_from_bit(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "int":
    """BoolEnc_get_index_from_bit(BoolEnc_ptr const arg1, node_ptr name) -> int"""
    return _bool.BoolEnc_get_index_from_bit(arg1, name)

def BoolEnc_get_var_bits(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "NodeList_ptr":
    """BoolEnc_get_var_bits(BoolEnc_ptr const arg1, node_ptr name) -> NodeList_ptr"""
    return _bool.BoolEnc_get_var_bits(arg1, name)

def BoolEnc_get_var_encoding(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "node_ptr":
    """BoolEnc_get_var_encoding(BoolEnc_ptr const arg1, node_ptr name) -> node_ptr"""
    return _bool.BoolEnc_get_var_encoding(arg1, name)

def BoolEnc_get_values_bool_encoding(arg1: 'BoolEnc_ptr const', values: 'node_ptr', bits: 'Set_t *') -> "node_ptr":
    """BoolEnc_get_values_bool_encoding(BoolEnc_ptr const arg1, node_ptr values, Set_t * bits) -> node_ptr"""
    return _bool.BoolEnc_get_values_bool_encoding(arg1, values, bits)

def BoolEnc_scalar_layer_to_bool_layer(layer_name: 'char const *') -> "char const *":
    """BoolEnc_scalar_layer_to_bool_layer(char const * layer_name) -> char const *"""
    return _bool.BoolEnc_scalar_layer_to_bool_layer(layer_name)

def BoolEnc_is_bool_layer(layer_name: 'char const *') -> "boolean":
    """BoolEnc_is_bool_layer(char const * layer_name) -> boolean"""
    return _bool.BoolEnc_is_bool_layer(layer_name)

def BoolEnc_get_value_from_var_bits(arg1: 'BoolEnc_ptr const', bit_values: 'BitValues_ptr const') -> "node_ptr":
    """BoolEnc_get_value_from_var_bits(BoolEnc_ptr const arg1, BitValues_ptr const bit_values) -> node_ptr"""
    return _bool.BoolEnc_get_value_from_var_bits(arg1, bit_values)

def BoolEnc_get_var_mask(arg1: 'BoolEnc_ptr const', name: 'node_ptr') -> "node_ptr":
    """BoolEnc_get_var_mask(BoolEnc_ptr const arg1, node_ptr name) -> node_ptr"""
    return _bool.BoolEnc_get_var_mask(arg1, name)
# This file is compatible with both classic and new-style classes.


