# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_clg')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_clg')
    _clg = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_clg', [dirname(__file__)])
        except ImportError:
            import _clg
            return _clg
        try:
            _mod = imp.load_module('_clg', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _clg = swig_import_helper()
    del swig_import_helper
else:
    import _clg
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _clg.PRIuPTR
PRIdPTR = _clg.PRIdPTR
LLU = _clg.LLU
LLO = _clg.LLO
LLX = _clg.LLX
false = _clg.false
true = _clg.true
OUTCOME_GENERIC_ERROR = _clg.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _clg.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _clg.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _clg.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _clg.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _clg.OUTCOME_SUCCESS
CLG_DIMACS = _clg.CLG_DIMACS
CLG_ZCHAFF = _clg.CLG_ZCHAFF
CLG_NUSMV = _clg.CLG_NUSMV

def Clg_Lit(literal: 'int') -> "clause_graph":
    """Clg_Lit(int literal) -> clause_graph"""
    return _clg.Clg_Lit(literal)

def Clg_Conj(left: 'clause_graph', right: 'clause_graph') -> "clause_graph":
    """Clg_Conj(clause_graph left, clause_graph right) -> clause_graph"""
    return _clg.Clg_Conj(left, right)

def Clg_Disj(left: 'clause_graph', right: 'clause_graph') -> "clause_graph":
    """Clg_Disj(clause_graph left, clause_graph right) -> clause_graph"""
    return _clg.Clg_Disj(left, right)

def Clg_Extract(head: 'clause_graph', type: 'int', commit: 'Clg_Commit', data: 'void *') -> "void":
    """Clg_Extract(clause_graph head, int type, Clg_Commit commit, void * data)"""
    return _clg.Clg_Extract(head, type, commit, data)

def Clg_Size(graph: 'clause_graph') -> "int":
    """Clg_Size(clause_graph graph) -> int"""
    return _clg.Clg_Size(graph)

def Clg_Free(graph: 'clause_graph') -> "void":
    """Clg_Free(clause_graph graph)"""
    return _clg.Clg_Free(graph)
# This file is compatible with both classic and new-style classes.


