# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_wff')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_wff')
    _wff = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wff', [dirname(__file__)])
        except ImportError:
            import _wff
            return _wff
        try:
            _mod = imp.load_module('_wff', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _wff = swig_import_helper()
    del swig_import_helper
else:
    import _wff
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _wff.PRIuPTR
PRIdPTR = _wff.PRIdPTR
LLU = _wff.LLU
LLO = _wff.LLO
LLX = _wff.LLX
false = _wff.false
true = _wff.true
OUTCOME_GENERIC_ERROR = _wff.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _wff.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _wff.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _wff.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _wff.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _wff.OUTCOME_SUCCESS

def wff_pkg_init() -> "void":
    """wff_pkg_init()"""
    return _wff.wff_pkg_init()

def wff_pkg_quit() -> "void":
    """wff_pkg_quit()"""
    return _wff.wff_pkg_quit()

def Wff_get_depth(ltl_wff: 'node_ptr') -> "int":
    """Wff_get_depth(node_ptr ltl_wff) -> int"""
    return _wff.Wff_get_depth(ltl_wff)

def Wff_make_truth() -> "node_ptr":
    """Wff_make_truth() -> node_ptr"""
    return _wff.Wff_make_truth()

def Wff_make_falsity() -> "node_ptr":
    """Wff_make_falsity() -> node_ptr"""
    return _wff.Wff_make_falsity()

def Wff_make_not(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_not(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_not(arg)

def Wff_make_and(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_and(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_and(arg1, arg2)

def Wff_make_or(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_or(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_or(arg1, arg2)

def Wff_make_implies(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_implies(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_implies(arg1, arg2)

def Wff_make_iff(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_iff(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_iff(arg1, arg2)

def Wff_make_next(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_next(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_next(arg)

def Wff_make_opnext_times(arg: 'node_ptr', x: 'int') -> "node_ptr":
    """Wff_make_opnext_times(node_ptr arg, int x) -> node_ptr"""
    return _wff.Wff_make_opnext_times(arg, x)

def Wff_make_opnext(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_opnext(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opnext(arg)

def Wff_make_opprec(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_opprec(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opprec(arg)

def Wff_make_opnotprecnot(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_opnotprecnot(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opnotprecnot(arg)

def Wff_make_globally(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_globally(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_globally(arg)

def Wff_make_historically(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_historically(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_historically(arg)

def Wff_make_eventually(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_eventually(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_eventually(arg)

def Wff_make_once(arg: 'node_ptr') -> "node_ptr":
    """Wff_make_once(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_once(arg)

def Wff_make_until(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_until(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_until(arg1, arg2)

def Wff_make_since(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_since(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_since(arg1, arg2)

def Wff_make_releases(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_releases(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_releases(arg1, arg2)

def Wff_make_triggered(arg1: 'node_ptr', arg2: 'node_ptr') -> "node_ptr":
    """Wff_make_triggered(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_triggered(arg1, arg2)
# This file is compatible with both classic and new-style classes.


