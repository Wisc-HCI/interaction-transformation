# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_set')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_set')
    _set = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_set', [dirname(__file__)])
        except ImportError:
            import _set
            return _set
        try:
            _mod = imp.load_module('_set', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _set = swig_import_helper()
    del swig_import_helper
else:
    import _set
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _set.PRIuPTR
PRIdPTR = _set.PRIdPTR
LLU = _set.LLU
LLO = _set.LLO
LLX = _set.LLX
false = _set.false
true = _set.true
OUTCOME_GENERIC_ERROR = _set.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _set.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _set.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _set.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _set.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _set.OUTCOME_SUCCESS

def set_pkg_init() -> "void":
    """set_pkg_init()"""
    return _set.set_pkg_init()

def set_pkg_quit() -> "void":
    """set_pkg_quit()"""
    return _set.set_pkg_quit()

def Set_MakeEmpty() -> "Set_t":
    """Set_MakeEmpty() -> Set_t"""
    return _set.Set_MakeEmpty()

def Set_Make(list: 'node_ptr') -> "Set_t":
    """Set_Make(node_ptr list) -> Set_t"""
    return _set.Set_Make(list)

def Set_MakeFromUnion(_union: 'node_ptr') -> "Set_t":
    """Set_MakeFromUnion(node_ptr _union) -> Set_t"""
    return _set.Set_MakeFromUnion(_union)

def Set_MakeSingleton(elem: 'Set_Element_t') -> "Set_t":
    """Set_MakeSingleton(Set_Element_t elem) -> Set_t"""
    return _set.Set_MakeSingleton(elem)

def Set_Copy(set: 'Set_t const') -> "Set_t":
    """Set_Copy(Set_t const set) -> Set_t"""
    return _set.Set_Copy(set)

def Set_Freeze(set: 'Set_t') -> "Set_t":
    """Set_Freeze(Set_t set) -> Set_t"""
    return _set.Set_Freeze(set)

def Set_ReleaseSet(set: 'Set_t') -> "void":
    """Set_ReleaseSet(Set_t set)"""
    return _set.Set_ReleaseSet(set)

def Set_ReleaseSetOfSet(set: 'Set_t') -> "void":
    """Set_ReleaseSetOfSet(Set_t set)"""
    return _set.Set_ReleaseSetOfSet(set)

def Set_IsEmpty(set: 'Set_t const') -> "boolean":
    """Set_IsEmpty(Set_t const set) -> boolean"""
    return _set.Set_IsEmpty(set)

def Set_IsMember(set: 'Set_t const', elem: 'Set_Element_t') -> "boolean":
    """Set_IsMember(Set_t const set, Set_Element_t elem) -> boolean"""
    return _set.Set_IsMember(set, elem)

def Set_GiveCardinality(set: 'Set_t const') -> "int":
    """Set_GiveCardinality(Set_t const set) -> int"""
    return _set.Set_GiveCardinality(set)

def Set_AddMember(set: 'Set_t', el: 'Set_Element_t') -> "Set_t":
    """Set_AddMember(Set_t set, Set_Element_t el) -> Set_t"""
    return _set.Set_AddMember(set, el)

def Set_RemoveMember(set: 'Set_t', el: 'Set_Element_t') -> "Set_t":
    """Set_RemoveMember(Set_t set, Set_Element_t el) -> Set_t"""
    return _set.Set_RemoveMember(set, el)

def Set_AddMembersFromList(set: 'Set_t', list: 'NodeList_ptr const') -> "Set_t":
    """Set_AddMembersFromList(Set_t set, NodeList_ptr const list) -> Set_t"""
    return _set.Set_AddMembersFromList(set, list)

def Set_Contains(set1: 'Set_t const', set2: 'Set_t const') -> "boolean":
    """Set_Contains(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Contains(set1, set2)

def Set_Equals(set1: 'Set_t const', set2: 'Set_t const') -> "boolean":
    """Set_Equals(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Equals(set1, set2)

def Set_Intersects(set1: 'Set_t const', set2: 'Set_t const') -> "boolean":
    """Set_Intersects(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Intersects(set1, set2)

def Set_Union(set1: 'Set_t', set2: 'Set_t const') -> "Set_t":
    """Set_Union(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Union(set1, set2)

def Set_Intersection(set1: 'Set_t', set2: 'Set_t const') -> "Set_t":
    """Set_Intersection(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Intersection(set1, set2)

def Set_Difference(set1: 'Set_t', set2: 'Set_t const') -> "Set_t":
    """Set_Difference(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Difference(set1, set2)

def Set_GetRest(set: 'Set_t const', arg2: 'Set_Iterator_t') -> "Set_t":
    """Set_GetRest(Set_t const set, Set_Iterator_t arg2) -> Set_t"""
    return _set.Set_GetRest(set, arg2)

def Set_GetFirstIter(set1: 'Set_t') -> "Set_Iterator_t":
    """Set_GetFirstIter(Set_t set1) -> Set_Iterator_t"""
    return _set.Set_GetFirstIter(set1)

def Set_GetNextIter(iter: 'Set_Iterator_t') -> "Set_Iterator_t":
    """Set_GetNextIter(Set_Iterator_t iter) -> Set_Iterator_t"""
    return _set.Set_GetNextIter(iter)

def Set_IsEndIter(iter: 'Set_Iterator_t') -> "boolean":
    """Set_IsEndIter(Set_Iterator_t iter) -> boolean"""
    return _set.Set_IsEndIter(iter)

def Set_GetMember(set: 'Set_t const', iter: 'Set_Iterator_t') -> "Set_Element_t":
    """Set_GetMember(Set_t const set, Set_Iterator_t iter) -> Set_Element_t"""
    return _set.Set_GetMember(set, iter)

def Set_Set2List(set: 'Set_t const') -> "NodeList_ptr":
    """Set_Set2List(Set_t const set) -> NodeList_ptr"""
    return _set.Set_Set2List(set)

def Set_PrintSet(arg1: 'FILE *', set: 'Set_t const', printer: 'void (*)(FILE *,Set_Element_t,void *)', printer_arg: 'void *') -> "void":
    """Set_PrintSet(FILE * arg1, Set_t const set, void (*)(FILE *,Set_Element_t,void *) printer, void * printer_arg)"""
    return _set.Set_PrintSet(arg1, set, printer, printer_arg)
# This file is compatible with both classic and new-style classes.


