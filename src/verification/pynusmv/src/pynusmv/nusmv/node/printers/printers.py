# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_printers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_printers')
    _printers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_printers', [dirname(__file__)])
        except ImportError:
            import _printers
            return _printers
        try:
            _mod = imp.load_module('_printers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _printers = swig_import_helper()
    del swig_import_helper
else:
    import _printers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _printers.PRIuPTR
PRIdPTR = _printers.PRIdPTR
LLU = _printers.LLU
LLO = _printers.LLO
LLX = _printers.LLX
false = _printers.false
true = _printers.true
OUTCOME_GENERIC_ERROR = _printers.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _printers.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _printers.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _printers.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _printers.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _printers.OUTCOME_SUCCESS

def Object_destroy(arg1: 'Object_ptr', arg: 'void *') -> "void":
    """Object_destroy(Object_ptr arg1, void * arg)"""
    return _printers.Object_destroy(arg1, arg)

def Object_copy(arg1: 'Object_ptr const') -> "Object_ptr":
    """Object_copy(Object_ptr const arg1) -> Object_ptr"""
    return _printers.Object_copy(arg1)
STREAM_TYPE_DEFAULT = _printers.STREAM_TYPE_DEFAULT
STREAM_TYPE_STDOUT = _printers.STREAM_TYPE_STDOUT
STREAM_TYPE_STDERR = _printers.STREAM_TYPE_STDERR
STREAM_TYPE_STRING = _printers.STREAM_TYPE_STRING
STREAM_TYPE_FILE = _printers.STREAM_TYPE_FILE
STREAM_TYPE_FUNCTION = _printers.STREAM_TYPE_FUNCTION
class StreamTypeArg(_object):
    """Proxy of C StreamTypeArg_TAG struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamTypeArg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamTypeArg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _printers.StreamTypeArg_file_set
    __swig_getmethods__["file"] = _printers.StreamTypeArg_file_get
    if _newclass:
        file = _swig_property(_printers.StreamTypeArg_file_get, _printers.StreamTypeArg_file_set)
    __swig_getmethods__["function"] = _printers.StreamTypeArg_function_get
    if _newclass:
        function = _swig_property(_printers.StreamTypeArg_function_get)

    def __init__(self):
        """__init__(StreamTypeArg_TAG self) -> StreamTypeArg"""
        this = _printers.new_StreamTypeArg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _printers.delete_StreamTypeArg
    __del__ = lambda self: None
StreamTypeArg_swigregister = _printers.StreamTypeArg_swigregister
StreamTypeArg_swigregister(StreamTypeArg)

class StreamTypeArg_TAG_function(_object):
    """Proxy of C StreamTypeArg_TAG_function struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamTypeArg_TAG_function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamTypeArg_TAG_function, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_ptr"] = _printers.StreamTypeArg_TAG_function_func_ptr_set
    __swig_getmethods__["func_ptr"] = _printers.StreamTypeArg_TAG_function_func_ptr_get
    if _newclass:
        func_ptr = _swig_property(_printers.StreamTypeArg_TAG_function_func_ptr_get, _printers.StreamTypeArg_TAG_function_func_ptr_set)
    __swig_setmethods__["argument"] = _printers.StreamTypeArg_TAG_function_argument_set
    __swig_getmethods__["argument"] = _printers.StreamTypeArg_TAG_function_argument_get
    if _newclass:
        argument = _swig_property(_printers.StreamTypeArg_TAG_function_argument_get, _printers.StreamTypeArg_TAG_function_argument_set)

    def __init__(self):
        """__init__(StreamTypeArg_TAG_function self) -> StreamTypeArg_TAG_function"""
        this = _printers.new_StreamTypeArg_TAG_function()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _printers.delete_StreamTypeArg_TAG_function
    __del__ = lambda self: None
StreamTypeArg_TAG_function_swigregister = _printers.StreamTypeArg_TAG_function_swigregister
StreamTypeArg_TAG_function_swigregister(StreamTypeArg_TAG_function)


def MasterPrinter_create() -> "MasterPrinter_ptr":
    """MasterPrinter_create() -> MasterPrinter_ptr"""
    return _printers.MasterPrinter_create()

def MasterPrinter_print_node(arg1: 'MasterPrinter_ptr', n: 'node_ptr') -> "int":
    """MasterPrinter_print_node(MasterPrinter_ptr arg1, node_ptr n) -> int"""
    return _printers.MasterPrinter_print_node(arg1, n)

def MasterPrinter_print_string(arg1: 'MasterPrinter_ptr', str: 'char const *') -> "int":
    """MasterPrinter_print_string(MasterPrinter_ptr arg1, char const * str) -> int"""
    return _printers.MasterPrinter_print_string(arg1, str)

def MasterPrinter_get_streamed_string(arg1: 'MasterPrinter_ptr const') -> "char const *":
    """MasterPrinter_get_streamed_string(MasterPrinter_ptr const arg1) -> char const *"""
    return _printers.MasterPrinter_get_streamed_string(arg1)

def MasterPrinter_reset_stream(arg1: 'MasterPrinter_ptr', offs: 'int') -> "void":
    """MasterPrinter_reset_stream(MasterPrinter_ptr arg1, int offs)"""
    return _printers.MasterPrinter_reset_stream(arg1, offs)

def MasterPrinter_set_stream_type(arg1: 'MasterPrinter_ptr', type: 'StreamType', arg: 'StreamTypeArg') -> "void":
    """MasterPrinter_set_stream_type(MasterPrinter_ptr arg1, StreamType type, StreamTypeArg arg)"""
    return _printers.MasterPrinter_set_stream_type(arg1, type, arg)

def MasterPrinter_get_stream_type(arg1: 'MasterPrinter_ptr const') -> "StreamType":
    """MasterPrinter_get_stream_type(MasterPrinter_ptr const arg1) -> StreamType"""
    return _printers.MasterPrinter_get_stream_type(arg1)

def MasterPrinter_flush_stream(arg1: 'MasterPrinter_ptr') -> "int":
    """MasterPrinter_flush_stream(MasterPrinter_ptr arg1) -> int"""
    return _printers.MasterPrinter_flush_stream(arg1)

def MasterPrinter_close_stream(arg1: 'MasterPrinter_ptr') -> "void":
    """MasterPrinter_close_stream(MasterPrinter_ptr arg1)"""
    return _printers.MasterPrinter_close_stream(arg1)

def PrinterBase_print_node(arg1: 'PrinterBase_ptr', n: 'node_ptr', priority: 'int') -> "int":
    """PrinterBase_print_node(PrinterBase_ptr arg1, node_ptr n, int priority) -> int"""
    return _printers.PrinterBase_print_node(arg1, n, priority)

def PrinterIWffCore_create(name: 'char const *') -> "PrinterIWffCore_ptr":
    """PrinterIWffCore_create(char const * name) -> PrinterIWffCore_ptr"""
    return _printers.PrinterIWffCore_create(name)

def PrinterPsl_create(name: 'char const *') -> "PrinterPsl_ptr":
    """PrinterPsl_create(char const * name) -> PrinterPsl_ptr"""
    return _printers.PrinterPsl_create(name)

def PrinterSexpCore_create(name: 'char const *') -> "PrinterSexpCore_ptr":
    """PrinterSexpCore_create(char const * name) -> PrinterSexpCore_ptr"""
    return _printers.PrinterSexpCore_create(name)

def PrinterWffCore_create(name: 'char const *') -> "PrinterWffCore_ptr":
    """PrinterWffCore_create(char const * name) -> PrinterWffCore_ptr"""
    return _printers.PrinterWffCore_create(name)
# This file is compatible with both classic and new-style classes.


