# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_normalizers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_normalizers')
    _normalizers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_normalizers', [dirname(__file__)])
        except ImportError:
            import _normalizers
            return _normalizers
        try:
            _mod = imp.load_module('_normalizers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _normalizers = swig_import_helper()
    del swig_import_helper
else:
    import _normalizers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _normalizers.PRIuPTR
PRIdPTR = _normalizers.PRIdPTR
LLU = _normalizers.LLU
LLO = _normalizers.LLO
LLX = _normalizers.LLX
false = _normalizers.false
true = _normalizers.true
OUTCOME_GENERIC_ERROR = _normalizers.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _normalizers.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _normalizers.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _normalizers.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _normalizers.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _normalizers.OUTCOME_SUCCESS

def Object_destroy(arg1: 'Object_ptr', arg: 'void *') -> "void":
    """Object_destroy(Object_ptr arg1, void * arg)"""
    return _normalizers.Object_destroy(arg1, arg)

def Object_copy(arg1: 'Object_ptr const') -> "Object_ptr":
    """Object_copy(Object_ptr const arg1) -> Object_ptr"""
    return _normalizers.Object_copy(arg1)

def MasterNormalizer_create() -> "MasterNormalizer_ptr":
    """MasterNormalizer_create() -> MasterNormalizer_ptr"""
    return _normalizers.MasterNormalizer_create()

def MasterNormalizer_normalize_node(arg1: 'MasterNormalizer_ptr', n: 'node_ptr') -> "node_ptr":
    """MasterNormalizer_normalize_node(MasterNormalizer_ptr arg1, node_ptr n) -> node_ptr"""
    return _normalizers.MasterNormalizer_normalize_node(arg1, n)

def MasterNormalizer_lookup_cache(arg1: 'MasterNormalizer_ptr', n: 'node_ptr') -> "node_ptr":
    """MasterNormalizer_lookup_cache(MasterNormalizer_ptr arg1, node_ptr n) -> node_ptr"""
    return _normalizers.MasterNormalizer_lookup_cache(arg1, n)

def MasterNormalizer_insert_cache(arg1: 'MasterNormalizer_ptr', n: 'node_ptr', find: 'node_ptr') -> "void":
    """MasterNormalizer_insert_cache(MasterNormalizer_ptr arg1, node_ptr n, node_ptr find)"""
    return _normalizers.MasterNormalizer_insert_cache(arg1, n, find)

def NormalizerBase_normalize_node(arg1: 'NormalizerBase_ptr', n: 'node_ptr') -> "node_ptr":
    """NormalizerBase_normalize_node(NormalizerBase_ptr arg1, node_ptr n) -> node_ptr"""
    return _normalizers.NormalizerBase_normalize_node(arg1, n)

def NormalizerCore_create(name: 'char const *') -> "NormalizerCore_ptr":
    """NormalizerCore_create(char const * name) -> NormalizerCore_ptr"""
    return _normalizers.NormalizerCore_create(name)

def NormalizerPsl_create(name: 'char const *') -> "NormalizerPsl_ptr":
    """NormalizerPsl_create(char const * name) -> NormalizerPsl_ptr"""
    return _normalizers.NormalizerPsl_create(name)
# This file is compatible with both classic and new-style classes.


