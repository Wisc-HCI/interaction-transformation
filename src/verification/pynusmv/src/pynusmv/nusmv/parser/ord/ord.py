# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ord')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ord')
    _ord = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ord', [dirname(__file__)])
        except ImportError:
            import _ord
            return _ord
        try:
            _mod = imp.load_module('_ord', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ord = swig_import_helper()
    del swig_import_helper
else:
    import _ord
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _ord.PRIuPTR
PRIdPTR = _ord.PRIdPTR
LLU = _ord.LLU
LLO = _ord.LLO
LLX = _ord.LLX
false = _ord.false
true = _ord.true
OUTCOME_GENERIC_ERROR = _ord.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _ord.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _ord.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _ord.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _ord.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _ord.OUTCOME_SUCCESS
RB = _ord.RB
LB = _ord.LB
NUMBER = _ord.NUMBER
ATOM = _ord.ATOM
MINUS = _ord.MINUS
DOT = _ord.DOT
class YYSTYPE(_object):
    """Proxy of C YYSTYPE struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYSTYPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YYSTYPE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _ord.YYSTYPE_node_set
    __swig_getmethods__["node"] = _ord.YYSTYPE_node_get
    if _newclass:
        node = _swig_property(_ord.YYSTYPE_node_get, _ord.YYSTYPE_node_set)

    def __init__(self):
        """__init__(YYSTYPE self) -> YYSTYPE"""
        this = _ord.new_YYSTYPE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ord.delete_YYSTYPE
    __del__ = lambda self: None
YYSTYPE_swigregister = _ord.YYSTYPE_swigregister
YYSTYPE_swigregister(YYSTYPE)

YYSTYPE_IS_DECLARED = _ord.YYSTYPE_IS_DECLARED
YYSTYPE_IS_TRIVIAL = _ord.YYSTYPE_IS_TRIVIAL

def ParserOrd_create() -> "ParserOrd_ptr":
    """ParserOrd_create() -> ParserOrd_ptr"""
    return _ord.ParserOrd_create()

def ParserOrd_destroy(arg1: 'ParserOrd_ptr') -> "void":
    """ParserOrd_destroy(ParserOrd_ptr arg1)"""
    return _ord.ParserOrd_destroy(arg1)

def ParserOrd_parse_from_file(arg1: 'ParserOrd_ptr', f: 'FILE *') -> "void":
    """ParserOrd_parse_from_file(ParserOrd_ptr arg1, FILE * f)"""
    return _ord.ParserOrd_parse_from_file(arg1, f)

def ParserOrd_parse_from_string(arg1: 'ParserOrd_ptr', str: 'char const *') -> "void":
    """ParserOrd_parse_from_string(ParserOrd_ptr arg1, char const * str)"""
    return _ord.ParserOrd_parse_from_string(arg1, str)

def ParserOrd_get_vars_list(arg1: 'ParserOrd_ptr const') -> "NodeList_ptr":
    """ParserOrd_get_vars_list(ParserOrd_ptr const arg1) -> NodeList_ptr"""
    return _ord.ParserOrd_get_vars_list(arg1)

def ParserOrd_reset(arg1: 'ParserOrd_ptr') -> "void":
    """ParserOrd_reset(ParserOrd_ptr arg1)"""
    return _ord.ParserOrd_reset(arg1)
# This file is compatible with both classic and new-style classes.

cvar = _ord.cvar

