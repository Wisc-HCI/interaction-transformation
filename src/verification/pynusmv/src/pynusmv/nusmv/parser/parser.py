# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_parser')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_parser')
    _parser = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_parser', [dirname(__file__)])
        except ImportError:
            import _parser
            return _parser
        try:
            _mod = imp.load_module('_parser', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _parser = swig_import_helper()
    del swig_import_helper
else:
    import _parser
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def ReadSimpExprFromString(str_expr: 'char const *') -> "int *":
    """ReadSimpExprFromString(char const * str_expr) -> node_ptr"""
    return _parser.ReadSimpExprFromString(str_expr)

def ReadNextExprFromString(str_expr: 'char const *') -> "int *":
    """ReadNextExprFromString(char const * str_expr) -> node_ptr"""
    return _parser.ReadNextExprFromString(str_expr)

def ReadIdentifierExprFromString(str_expr: 'char const *') -> "int *":
    """ReadIdentifierExprFromString(char const * str_expr) -> node_ptr"""
    return _parser.ReadIdentifierExprFromString(str_expr)

def ReadCmdFromString(str_expr: 'char const *') -> "int *":
    """ReadCmdFromString(char const * str_expr) -> node_ptr"""
    return _parser.ReadCmdFromString(str_expr)

def ReadSMVFromFile(filename: 'char const *') -> "int":
    """ReadSMVFromFile(char const * filename) -> int"""
    return _parser.ReadSMVFromFile(filename)
PRIuPTR = _parser.PRIuPTR
PRIdPTR = _parser.PRIdPTR
LLU = _parser.LLU
LLO = _parser.LLO
LLX = _parser.LLX
false = _parser.false
true = _parser.true
OUTCOME_GENERIC_ERROR = _parser.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _parser.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _parser.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _parser.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _parser.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _parser.OUTCOME_SUCCESS
TOK_CONSTRAINT = _parser.TOK_CONSTRAINT
TOK_MAXU = _parser.TOK_MAXU
TOK_MINU = _parser.TOK_MINU
TOK_ABU = _parser.TOK_ABU
TOK_EBU = _parser.TOK_EBU
TOK_AU = _parser.TOK_AU
TOK_EU = _parser.TOK_EU
TOK_CONTEXT = _parser.TOK_CONTEXT
TOK_PROCESS = _parser.TOK_PROCESS
TOK_MODULE = _parser.TOK_MODULE
TOK_NAME = _parser.TOK_NAME
TOK_COMPUTE = _parser.TOK_COMPUTE
TOK_LTLSPEC = _parser.TOK_LTLSPEC
TOK_CTLSPEC = _parser.TOK_CTLSPEC
TOK_SPEC = _parser.TOK_SPEC
TOK_INVAR = _parser.TOK_INVAR
TOK_TRANS = _parser.TOK_TRANS
TOK_INIT = _parser.TOK_INIT
TOK_ARRAY_DEFINE = _parser.TOK_ARRAY_DEFINE
TOK_DEFINE = _parser.TOK_DEFINE
TOK_IVAR = _parser.TOK_IVAR
TOK_FROZENVAR = _parser.TOK_FROZENVAR
TOK_VAR = _parser.TOK_VAR
TOK_PSLSPEC = _parser.TOK_PSLSPEC
TOK_CONSTANTS = _parser.TOK_CONSTANTS
TOK_JUSTICE = _parser.TOK_JUSTICE
TOK_COMPASSION = _parser.TOK_COMPASSION
TOK_FAIRNESS = _parser.TOK_FAIRNESS
TOK_INVARSPEC = _parser.TOK_INVARSPEC
TOK_ASSIGN = _parser.TOK_ASSIGN
TOK_ISA = _parser.TOK_ISA
TOK_SEMI = _parser.TOK_SEMI
TOK_CONS = _parser.TOK_CONS
TOK_OF = _parser.TOK_OF
TOK_RCB = _parser.TOK_RCB
TOK_LCB = _parser.TOK_LCB
TOK_RB = _parser.TOK_RB
TOK_RP = _parser.TOK_RP
TOK_LP = _parser.TOK_LP
TOK_TWODOTS = _parser.TOK_TWODOTS
TOK_EQDEF = _parser.TOK_EQDEF
TOK_SELF = _parser.TOK_SELF
TOK_COLON = _parser.TOK_COLON
TOK_ESAC = _parser.TOK_ESAC
TOK_CASE = _parser.TOK_CASE
TOK_COMPID = _parser.TOK_COMPID
TOK_COMPWFF = _parser.TOK_COMPWFF
TOK_CTLWFF = _parser.TOK_CTLWFF
TOK_LTLPSL = _parser.TOK_LTLPSL
TOK_LTLWFF = _parser.TOK_LTLWFF
TOK_NEXTWFF = _parser.TOK_NEXTWFF
TOK_SIMPWFF = _parser.TOK_SIMPWFF
TOK_INCONTEXT = _parser.TOK_INCONTEXT
TOK_WORD = _parser.TOK_WORD
TOK_REAL = _parser.TOK_REAL
TOK_INTEGER = _parser.TOK_INTEGER
TOK_BOOLEAN = _parser.TOK_BOOLEAN
TOK_ARRAY = _parser.TOK_ARRAY
TOK_WORD1 = _parser.TOK_WORD1
TOK_BOOL = _parser.TOK_BOOL
TOK_WAWRITE = _parser.TOK_WAWRITE
TOK_WAREAD = _parser.TOK_WAREAD
TOK_COUNT = _parser.TOK_COUNT
TOK_WTOINT = _parser.TOK_WTOINT
TOK_WSIZEOF = _parser.TOK_WSIZEOF
TOK_WRESIZE = _parser.TOK_WRESIZE
TOK_SWCONST = _parser.TOK_SWCONST
TOK_UWCONST = _parser.TOK_UWCONST
TOK_EXTEND = _parser.TOK_EXTEND
TOK_UNSIGNED = _parser.TOK_UNSIGNED
TOK_SIGNED = _parser.TOK_SIGNED
TOK_TRUEEXP = _parser.TOK_TRUEEXP
TOK_FALSEEXP = _parser.TOK_FALSEEXP
TOK_ATOM = _parser.TOK_ATOM
TOK_NUMBER_EXP = _parser.TOK_NUMBER_EXP
TOK_NUMBER_REAL = _parser.TOK_NUMBER_REAL
TOK_NUMBER_FRAC = _parser.TOK_NUMBER_FRAC
TOK_NUMBER = _parser.TOK_NUMBER
TOK_NUMBER_WORD = _parser.TOK_NUMBER_WORD
TOK_QUESTIONMARK = _parser.TOK_QUESTIONMARK
TOK_NOT = _parser.TOK_NOT
TOK_AND = _parser.TOK_AND
TOK_XNOR = _parser.TOK_XNOR
TOK_XOR = _parser.TOK_XOR
TOK_OR = _parser.TOK_OR
TOK_IFF = _parser.TOK_IFF
TOK_IMPLIES = _parser.TOK_IMPLIES
TOK_COMMA = _parser.TOK_COMMA
TOK_AA = _parser.TOK_AA
TOK_EE = _parser.TOK_EE
TOK_AG = _parser.TOK_AG
TOK_EG = _parser.TOK_EG
TOK_AF = _parser.TOK_AF
TOK_EF = _parser.TOK_EF
TOK_AX = _parser.TOK_AX
TOK_EX = _parser.TOK_EX
TOK_RELEASES = _parser.TOK_RELEASES
TOK_TRIGGERED = _parser.TOK_TRIGGERED
TOK_UNTIL = _parser.TOK_UNTIL
TOK_SINCE = _parser.TOK_SINCE
TOK_MMAX = _parser.TOK_MMAX
TOK_MMIN = _parser.TOK_MMIN
TOK_BUNTIL = _parser.TOK_BUNTIL
TOK_ABG = _parser.TOK_ABG
TOK_ABF = _parser.TOK_ABF
TOK_EBG = _parser.TOK_EBG
TOK_EBF = _parser.TOK_EBF
TOK_OP_FUTURE = _parser.TOK_OP_FUTURE
TOK_OP_GLOBAL = _parser.TOK_OP_GLOBAL
TOK_OP_NEXT = _parser.TOK_OP_NEXT
TOK_OP_ONCE = _parser.TOK_OP_ONCE
TOK_OP_HISTORICAL = _parser.TOK_OP_HISTORICAL
TOK_OP_NOTPRECNOT = _parser.TOK_OP_NOTPRECNOT
TOK_OP_PREC = _parser.TOK_OP_PREC
TOK_GE = _parser.TOK_GE
TOK_LE = _parser.TOK_LE
TOK_GT = _parser.TOK_GT
TOK_LT = _parser.TOK_LT
TOK_NOTEQUAL = _parser.TOK_NOTEQUAL
TOK_EQUAL = _parser.TOK_EQUAL
TOK_RROTATE = _parser.TOK_RROTATE
TOK_LROTATE = _parser.TOK_LROTATE
TOK_RSHIFT = _parser.TOK_RSHIFT
TOK_LSHIFT = _parser.TOK_LSHIFT
TOK_SETIN = _parser.TOK_SETIN
TOK_UNION = _parser.TOK_UNION
TOK_DIVIDE = _parser.TOK_DIVIDE
TOK_TIMES = _parser.TOK_TIMES
TOK_MINUS = _parser.TOK_MINUS
TOK_PLUS = _parser.TOK_PLUS
TOK_MOD = _parser.TOK_MOD
TOK_CONCATENATION = _parser.TOK_CONCATENATION
TOK_SMALLINIT = _parser.TOK_SMALLINIT
TOK_NEXT = _parser.TOK_NEXT
TOK_BIT = _parser.TOK_BIT
TOK_DOT = _parser.TOK_DOT
TOK_LB = _parser.TOK_LB
TOK_MIRROR = _parser.TOK_MIRROR
TOK_PREDSLIST = _parser.TOK_PREDSLIST
TOK_PRED = _parser.TOK_PRED
class YYSTYPE(_object):
    """Proxy of C YYSTYPE struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYSTYPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YYSTYPE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _parser.YYSTYPE_node_set
    __swig_getmethods__["node"] = _parser.YYSTYPE_node_get
    if _newclass:
        node = _swig_property(_parser.YYSTYPE_node_get, _parser.YYSTYPE_node_set)
    __swig_setmethods__["lineno"] = _parser.YYSTYPE_lineno_set
    __swig_getmethods__["lineno"] = _parser.YYSTYPE_lineno_get
    if _newclass:
        lineno = _swig_property(_parser.YYSTYPE_lineno_get, _parser.YYSTYPE_lineno_set)

    def __init__(self):
        """__init__(YYSTYPE self) -> YYSTYPE"""
        this = _parser.new_YYSTYPE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _parser.delete_YYSTYPE
    __del__ = lambda self: None
YYSTYPE_swigregister = _parser.YYSTYPE_swigregister
YYSTYPE_swigregister(YYSTYPE)
cvar = _parser.cvar

YYSTYPE_IS_DECLARED = _parser.YYSTYPE_IS_DECLARED
YYSTYPE_IS_TRIVIAL = _parser.YYSTYPE_IS_TRIVIAL
OPT_PARSER_IS_LAX = _parser.OPT_PARSER_IS_LAX

def Parser_Init() -> "void":
    """Parser_Init()"""
    return _parser.Parser_Init()

def Parser_Quit() -> "void":
    """Parser_Quit()"""
    return _parser.Parser_Quit()

def Parser_ReadCmdFromString(argc: 'int', argv: 'char const **', head: 'char const *', tail: 'char const *', pc: 'node_ptr *') -> "int":
    """Parser_ReadCmdFromString(int argc, char const ** argv, char const * head, char const * tail, node_ptr * pc) -> int"""
    return _parser.Parser_ReadCmdFromString(argc, argv, head, tail, pc)

def Parser_ReadSimpExprFromString(str_expr: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_ReadSimpExprFromString(char const * str_expr, node_ptr * res) -> int"""
    return _parser.Parser_ReadSimpExprFromString(str_expr, res)

def Parser_ReadCmdFromFile(filename: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_ReadCmdFromFile(char const * filename, node_ptr * res) -> int"""
    return _parser.Parser_ReadCmdFromFile(filename, res)

def Parser_ReadSMVFromFile(filename: 'char const *') -> "int":
    """Parser_ReadSMVFromFile(char const * filename) -> int"""
    return _parser.Parser_ReadSMVFromFile(filename)

def Parser_ReadLtlExprFromFile(filename: 'char const *') -> "int":
    """Parser_ReadLtlExprFromFile(char const * filename) -> int"""
    return _parser.Parser_ReadLtlExprFromFile(filename)

def Parser_read_psl_from_string(argc: 'int', argv: 'char const **', res: 'node_ptr *') -> "int":
    """Parser_read_psl_from_string(int argc, char const ** argv, node_ptr * res) -> int"""
    return _parser.Parser_read_psl_from_string(argc, argv, res)

def Parser_read_psl_from_file(filename: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_read_psl_from_file(char const * filename, node_ptr * res) -> int"""
    return _parser.Parser_read_psl_from_file(filename, res)

def Parser_ReadNextExprFromString(str_expr: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_ReadNextExprFromString(char const * str_expr, node_ptr * res) -> int"""
    return _parser.Parser_ReadNextExprFromString(str_expr, res)

def Parser_ReadIdentifierExprFromString(str_expr: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_ReadIdentifierExprFromString(char const * str_expr, node_ptr * res) -> int"""
    return _parser.Parser_ReadIdentifierExprFromString(str_expr, res)

def Parser_ReadNextExprFromFile(filename: 'char const *', res: 'node_ptr *') -> "int":
    """Parser_ReadNextExprFromFile(char const * filename, node_ptr * res) -> int"""
    return _parser.Parser_ReadNextExprFromFile(filename, res)

def Parser_get_syntax_errors_list() -> "node_ptr":
    """Parser_get_syntax_errors_list() -> node_ptr"""
    return _parser.Parser_get_syntax_errors_list()

def Parser_get_syntax_error(node: 'node_ptr') -> "char const **, int *, char const **, char const **":
    """Parser_get_syntax_error(node_ptr node)"""
    return _parser.Parser_get_syntax_error(node)

def Parser_print_syntax_error(error: 'node_ptr', fout: 'FILE *') -> "void":
    """Parser_print_syntax_error(node_ptr error, FILE * fout)"""
    return _parser.Parser_print_syntax_error(error, fout)
NUSMV_CORE_SYMBOL_FIRST = _parser.NUSMV_CORE_SYMBOL_FIRST
NUSMV_STATEMENTS_SYMBOL_FIRST = _parser.NUSMV_STATEMENTS_SYMBOL_FIRST
TRANS = _parser.TRANS
INIT = _parser.INIT
INVAR = _parser.INVAR
ASSIGN = _parser.ASSIGN
FAIRNESS = _parser.FAIRNESS
JUSTICE = _parser.JUSTICE
COMPASSION = _parser.COMPASSION
SPEC = _parser.SPEC
LTLSPEC = _parser.LTLSPEC
PSLSPEC = _parser.PSLSPEC
INVARSPEC = _parser.INVARSPEC
COMPUTE = _parser.COMPUTE
DEFINE = _parser.DEFINE
ISA = _parser.ISA
GOTO = _parser.GOTO
CONSTRAINT = _parser.CONSTRAINT
MODULE = _parser.MODULE
PROCESS = _parser.PROCESS
MODTYPE = _parser.MODTYPE
LAMBDA = _parser.LAMBDA
CONSTANTS = _parser.CONSTANTS
PRED = _parser.PRED
ATTIME = _parser.ATTIME
PREDS_LIST = _parser.PREDS_LIST
MIRROR = _parser.MIRROR
SYNTAX_ERROR = _parser.SYNTAX_ERROR
NUSMV_STATEMENTS_SYMBOL_LAST = _parser.NUSMV_STATEMENTS_SYMBOL_LAST
NUSMV_EXPR_SYMBOL_FIRST = _parser.NUSMV_EXPR_SYMBOL_FIRST
FAILURE = _parser.FAILURE
CONTEXT = _parser.CONTEXT
EU = _parser.EU
AU = _parser.AU
EW = _parser.EW
AW = _parser.AW
EBU = _parser.EBU
ABU = _parser.ABU
MINU = _parser.MINU
MAXU = _parser.MAXU
VAR = _parser.VAR
FROZENVAR = _parser.FROZENVAR
IVAR = _parser.IVAR
BOOLEAN = _parser.BOOLEAN
ARRAY = _parser.ARRAY
SCALAR = _parser.SCALAR
CONS = _parser.CONS
BDD = _parser.BDD
SEMI = _parser.SEMI
EQDEF = _parser.EQDEF
TWODOTS = _parser.TWODOTS
FALSEEXP = _parser.FALSEEXP
TRUEEXP = _parser.TRUEEXP
SELF = _parser.SELF
CASE = _parser.CASE
COLON = _parser.COLON
IFTHENELSE = _parser.IFTHENELSE
SIMPWFF = _parser.SIMPWFF
NEXTWFF = _parser.NEXTWFF
LTLWFF = _parser.LTLWFF
CTLWFF = _parser.CTLWFF
COMPWFF = _parser.COMPWFF
ATOM = _parser.ATOM
NUMBER = _parser.NUMBER
COMMA = _parser.COMMA
IMPLIES = _parser.IMPLIES
IFF = _parser.IFF
OR = _parser.OR
XOR = _parser.XOR
XNOR = _parser.XNOR
AND = _parser.AND
NOT = _parser.NOT
EX = _parser.EX
AX = _parser.AX
EF = _parser.EF
AF = _parser.AF
EG = _parser.EG
AG = _parser.AG
SINCE = _parser.SINCE
UNTIL = _parser.UNTIL
TRIGGERED = _parser.TRIGGERED
RELEASES = _parser.RELEASES
EBF = _parser.EBF
EBG = _parser.EBG
ABF = _parser.ABF
ABG = _parser.ABG
OP_NEXT = _parser.OP_NEXT
OP_GLOBAL = _parser.OP_GLOBAL
OP_FUTURE = _parser.OP_FUTURE
OP_PREC = _parser.OP_PREC
OP_NOTPRECNOT = _parser.OP_NOTPRECNOT
OP_HISTORICAL = _parser.OP_HISTORICAL
OP_ONCE = _parser.OP_ONCE
EQUAL = _parser.EQUAL
NOTEQUAL = _parser.NOTEQUAL
LT = _parser.LT
GT = _parser.GT
LE = _parser.LE
GE = _parser.GE
UNION = _parser.UNION
SETIN = _parser.SETIN
MOD = _parser.MOD
PLUS = _parser.PLUS
MINUS = _parser.MINUS
TIMES = _parser.TIMES
DIVIDE = _parser.DIVIDE
UMINUS = _parser.UMINUS
NEXT = _parser.NEXT
SMALLINIT = _parser.SMALLINIT
DOT = _parser.DOT
BIT = _parser.BIT
RANGE = _parser.RANGE
UNSIGNED_WORD = _parser.UNSIGNED_WORD
SIGNED_WORD = _parser.SIGNED_WORD
INTEGER = _parser.INTEGER
REAL = _parser.REAL
NUMBER_UNSIGNED_WORD = _parser.NUMBER_UNSIGNED_WORD
NUMBER_SIGNED_WORD = _parser.NUMBER_SIGNED_WORD
NUMBER_FRAC = _parser.NUMBER_FRAC
NUMBER_REAL = _parser.NUMBER_REAL
NUMBER_EXP = _parser.NUMBER_EXP
LSHIFT = _parser.LSHIFT
RSHIFT = _parser.RSHIFT
LROTATE = _parser.LROTATE
RROTATE = _parser.RROTATE
BIT_SELECTION = _parser.BIT_SELECTION
CONCATENATION = _parser.CONCATENATION
CAST_BOOL = _parser.CAST_BOOL
CAST_WORD1 = _parser.CAST_WORD1
CAST_SIGNED = _parser.CAST_SIGNED
CAST_UNSIGNED = _parser.CAST_UNSIGNED
EXTEND = _parser.EXTEND
WORDARRAY = _parser.WORDARRAY
WAREAD = _parser.WAREAD
WAWRITE = _parser.WAWRITE
UWCONST = _parser.UWCONST
SWCONST = _parser.SWCONST
WRESIZE = _parser.WRESIZE
WSIZEOF = _parser.WSIZEOF
CAST_TOINT = _parser.CAST_TOINT
COMPID = _parser.COMPID
ARRAY_TYPE = _parser.ARRAY_TYPE
ARRAY_DEF = _parser.ARRAY_DEF
NFUNCTION = _parser.NFUNCTION
COUNT = _parser.COUNT
NUSMV_EXPR_SYMBOL_LAST = _parser.NUSMV_EXPR_SYMBOL_LAST
NUSMV_CORE_SYMBOL_LAST = _parser.NUSMV_CORE_SYMBOL_LAST
# This file is compatible with both classic and new-style classes.


