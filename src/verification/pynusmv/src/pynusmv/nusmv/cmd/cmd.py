# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cmd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cmd')
    _cmd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cmd', [dirname(__file__)])
        except ImportError:
            import _cmd
            return _cmd
        try:
            _mod = imp.load_module('_cmd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cmd = swig_import_helper()
    del swig_import_helper
else:
    import _cmd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _cmd.PRIuPTR
PRIdPTR = _cmd.PRIdPTR
LLU = _cmd.LLU
LLO = _cmd.LLO
LLX = _cmd.LLX
false = _cmd.false
true = _cmd.true
OUTCOME_GENERIC_ERROR = _cmd.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _cmd.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _cmd.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _cmd.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _cmd.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _cmd.OUTCOME_SUCCESS

def Cmd_CommandAdd(name: 'char *', funcFp: 'PFI', changes: 'int', reentrant: 'boolean') -> "void":
    """Cmd_CommandAdd(char * name, PFI funcFp, int changes, boolean reentrant)"""
    return _cmd.Cmd_CommandAdd(name, funcFp, changes, reentrant)

def Cmd_CommandRemove(name: 'char const *') -> "boolean":
    """Cmd_CommandRemove(char const * name) -> boolean"""
    return _cmd.Cmd_CommandRemove(name)

def Cmd_CommandExecute(command: 'char *') -> "int":
    """Cmd_CommandExecute(char * command) -> int"""
    return _cmd.Cmd_CommandExecute(command)

def Cmd_SecureCommandExecute(command: 'char *') -> "int":
    """Cmd_SecureCommandExecute(char * command) -> int"""
    return _cmd.Cmd_SecureCommandExecute(command)

def Cmd_FileOpen(fileName: 'char *', mode: 'char *', realFileName_p: 'char **', silent: 'int') -> "FILE *":
    """Cmd_FileOpen(char * fileName, char * mode, char ** realFileName_p, int silent) -> FILE *"""
    return _cmd.Cmd_FileOpen(fileName, mode, realFileName_p, silent)

def Cmd_Init() -> "void":
    """Cmd_Init()"""
    return _cmd.Cmd_Init()

def Cmd_End() -> "void":
    """Cmd_End()"""
    return _cmd.Cmd_End()

def CmdOpenPipe(useMore: 'int') -> "FILE *":
    """CmdOpenPipe(int useMore) -> FILE *"""
    return _cmd.CmdOpenPipe(useMore)

def CmdClosePipe(file: 'FILE *') -> "void":
    """CmdClosePipe(FILE * file)"""
    return _cmd.CmdClosePipe(file)

def CmdOpenFile(filename: 'char const *') -> "FILE *":
    """CmdOpenFile(char const * filename) -> FILE *"""
    return _cmd.CmdOpenFile(filename)

def CmdCloseFile(file: 'FILE *') -> "void":
    """CmdCloseFile(FILE * file)"""
    return _cmd.CmdCloseFile(file)
# This file is compatible with both classic and new-style classes.


