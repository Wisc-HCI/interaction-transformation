# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_prob')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_prob')
    _prob = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_prob', [dirname(__file__)])
        except ImportError:
            import _prob
            return _prob
        try:
            _mod = imp.load_module('_prob', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _prob = swig_import_helper()
    del swig_import_helper
else:
    import _prob
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _prob.PRIuPTR
PRIdPTR = _prob.PRIdPTR
LLU = _prob.LLU
LLO = _prob.LLO
LLX = _prob.LLX
false = _prob.false
true = _prob.true
OUTCOME_GENERIC_ERROR = _prob.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _prob.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _prob.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _prob.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _prob.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _prob.OUTCOME_SUCCESS

def ParserProb_create() -> "ParserProb_ptr":
    """ParserProb_create() -> ParserProb_ptr"""
    return _prob.ParserProb_create()

def ParserProb_destroy(arg1: 'ParserProb_ptr') -> "void":
    """ParserProb_destroy(ParserProb_ptr arg1)"""
    return _prob.ParserProb_destroy(arg1)

def ParserProb_parse_from_file(arg1: 'ParserProb_ptr', f: 'FILE *') -> "void":
    """ParserProb_parse_from_file(ParserProb_ptr arg1, FILE * f)"""
    return _prob.ParserProb_parse_from_file(arg1, f)

def ParserProb_parse_from_string(arg1: 'ParserProb_ptr', str: 'char const *') -> "void":
    """ParserProb_parse_from_string(ParserProb_ptr arg1, char const * str)"""
    return _prob.ParserProb_parse_from_string(arg1, str)

def ParserProb_get_prob_list(arg1: 'ParserProb_ptr const') -> "NodeList_ptr":
    """ParserProb_get_prob_list(ParserProb_ptr const arg1) -> NodeList_ptr"""
    return _prob.ParserProb_get_prob_list(arg1)

def ParserProb_reset(arg1: 'ParserProb_ptr') -> "void":
    """ParserProb_reset(ParserProb_ptr arg1)"""
    return _prob.ParserProb_reset(arg1)
TK_COLON = _prob.TK_COLON
TK_EQUAL = _prob.TK_EQUAL
TK_RB = _prob.TK_RB
TK_LB = _prob.TK_LB
TK_FALSE = _prob.TK_FALSE
TK_TRUE = _prob.TK_TRUE
TK_REAL = _prob.TK_REAL
TK_NUMBER = _prob.TK_NUMBER
TK_ATOM = _prob.TK_ATOM
TK_SEMI = _prob.TK_SEMI
TK_DOT = _prob.TK_DOT
TK_AND = _prob.TK_AND
class YYSTYPE(_object):
    """Proxy of C YYSTYPE struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYSTYPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YYSTYPE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _prob.YYSTYPE_node_set
    __swig_getmethods__["node"] = _prob.YYSTYPE_node_get
    if _newclass:
        node = _swig_property(_prob.YYSTYPE_node_get, _prob.YYSTYPE_node_set)

    def __init__(self):
        """__init__(YYSTYPE self) -> YYSTYPE"""
        this = _prob.new_YYSTYPE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prob.delete_YYSTYPE
    __del__ = lambda self: None
YYSTYPE_swigregister = _prob.YYSTYPE_swigregister
YYSTYPE_swigregister(YYSTYPE)

YYSTYPE_IS_DECLARED = _prob.YYSTYPE_IS_DECLARED
YYSTYPE_IS_TRIVIAL = _prob.YYSTYPE_IS_TRIVIAL
# This file is compatible with both classic and new-style classes.

cvar = _prob.cvar

