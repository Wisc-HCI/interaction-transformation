# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_compass')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_compass')
    _compass = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_compass', [dirname(__file__)])
        except ImportError:
            import _compass
            return _compass
        try:
            _mod = imp.load_module('_compass', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _compass = swig_import_helper()
    del swig_import_helper
else:
    import _compass
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _compass.PRIuPTR
PRIdPTR = _compass.PRIdPTR
LLU = _compass.LLU
LLO = _compass.LLO
LLX = _compass.LLX
false = _compass.false
true = _compass.true
OUTCOME_GENERIC_ERROR = _compass.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _compass.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _compass.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _compass.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _compass.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _compass.OUTCOME_SUCCESS

def Compass_init() -> "void":
    """Compass_init()"""
    return _compass.Compass_init()

def Compass_init_cmd() -> "void":
    """Compass_init_cmd()"""
    return _compass.Compass_init_cmd()

def Compass_reset() -> "void":
    """Compass_reset()"""
    return _compass.Compass_reset()

def Compass_quit() -> "void":
    """Compass_quit()"""
    return _compass.Compass_quit()

def Compass_write_sigref(file: 'FILE *', fsm: 'BddFsm_ptr', probs_list: 'NodeList_ptr', tau: 'Expr_ptr', ap_list: 'NodeList_ptr', do_indent: 'boolean') -> "void":
    """Compass_write_sigref(FILE * file, BddFsm_ptr fsm, NodeList_ptr probs_list, Expr_ptr tau, NodeList_ptr ap_list, boolean do_indent)"""
    return _compass.Compass_write_sigref(file, fsm, probs_list, tau, ap_list, do_indent)

def Compass_write_language_sigref(enc: 'BddEnc_ptr', file: 'FILE *') -> "int":
    """Compass_write_language_sigref(BddEnc_ptr enc, FILE * file) -> int"""
    return _compass.Compass_write_language_sigref(enc, file)

def Compass_print_add_sigref_format(dd: 'DdManager *', add: 'add_ptr', file: 'FILE *', do_indent: 'boolean') -> "int":
    """Compass_print_add_sigref_format(DdManager * dd, add_ptr add, FILE * file, boolean do_indent) -> int"""
    return _compass.Compass_print_add_sigref_format(dd, add, file, do_indent)
# This file is compatible with both classic and new-style classes.


