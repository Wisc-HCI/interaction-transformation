# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cinit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cinit')
    _cinit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cinit', [dirname(__file__)])
        except ImportError:
            import _cinit
            return _cinit
        try:
            _mod = imp.load_module('_cinit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cinit = swig_import_helper()
    del swig_import_helper
else:
    import _cinit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

PRIuPTR = _cinit.PRIuPTR
PRIdPTR = _cinit.PRIdPTR
LLU = _cinit.LLU
LLO = _cinit.LLO
LLX = _cinit.LLX
false = _cinit.false
true = _cinit.true
OUTCOME_GENERIC_ERROR = _cinit.OUTCOME_GENERIC_ERROR
OUTCOME_PARSER_ERROR = _cinit.OUTCOME_PARSER_ERROR
OUTCOME_SYNTAX_ERROR = _cinit.OUTCOME_SYNTAX_ERROR
OUTCOME_FILE_ERROR = _cinit.OUTCOME_FILE_ERROR
OUTCOME_SUCCESS_REQUIRED_HELP = _cinit.OUTCOME_SUCCESS_REQUIRED_HELP
OUTCOME_SUCCESS = _cinit.OUTCOME_SUCCESS
NUSMV_LIBRARY_NAME = _cinit.NUSMV_LIBRARY_NAME
NUSMV_LIBRARY_VERSION = _cinit.NUSMV_LIBRARY_VERSION
NUSMV_LIBRARY_BUILD_DATE = _cinit.NUSMV_LIBRARY_BUILD_DATE
NUSMV_LIBRARY_EMAIL = _cinit.NUSMV_LIBRARY_EMAIL
NUSMV_LIBRARY_WEBSITE = _cinit.NUSMV_LIBRARY_WEBSITE
NUSMV_LIBRARY_BUGREPORT = _cinit.NUSMV_LIBRARY_BUGREPORT

def CInit_NuSMVReadVersion() -> "char *":
    """CInit_NuSMVReadVersion() -> char *"""
    return _cinit.CInit_NuSMVReadVersion()

def CInit_NuSMVObtainLibrary() -> "char *":
    """CInit_NuSMVObtainLibrary() -> char *"""
    return _cinit.CInit_NuSMVObtainLibrary()

def CInit_NuSMVInitPrintMore() -> "void":
    """CInit_NuSMVInitPrintMore()"""
    return _cinit.CInit_NuSMVInitPrintMore()

def CInit_NuSMVEndPrintMore() -> "int":
    """CInit_NuSMVEndPrintMore() -> int"""
    return _cinit.CInit_NuSMVEndPrintMore()

def CInit_BannerPrint(file: 'FILE *') -> "void":
    """CInit_BannerPrint(FILE * file)"""
    return _cinit.CInit_BannerPrint(file)

def CInit_BannerPrintLibrary(file: 'FILE *') -> "void":
    """CInit_BannerPrintLibrary(FILE * file)"""
    return _cinit.CInit_BannerPrintLibrary(file)

def CInit_BannerPrint_nusmv_library(file: 'FILE *') -> "void":
    """CInit_BannerPrint_nusmv_library(FILE * file)"""
    return _cinit.CInit_BannerPrint_nusmv_library(file)

def CInit_BannerPrint_cudd(file: 'FILE *') -> "void":
    """CInit_BannerPrint_cudd(FILE * file)"""
    return _cinit.CInit_BannerPrint_cudd(file)

def CInit_BannerPrint_minisat(file: 'FILE *') -> "void":
    """CInit_BannerPrint_minisat(FILE * file)"""
    return _cinit.CInit_BannerPrint_minisat(file)

def CInit_BannerPrint_zchaff(file: 'FILE *') -> "void":
    """CInit_BannerPrint_zchaff(FILE * file)"""
    return _cinit.CInit_BannerPrint_zchaff(file)

def CInit_NusmvrcSource() -> "int":
    """CInit_NusmvrcSource() -> int"""
    return _cinit.CInit_NusmvrcSource()

def save_nusmv_stdout() -> "void":
    """save_nusmv_stdout()"""
    return _cinit.save_nusmv_stdout()

def restore_nusmv_stdout() -> "void":
    """restore_nusmv_stdout()"""
    return _cinit.restore_nusmv_stdout()

def set_nusmv_stdout(name: 'char const *') -> "void":
    """set_nusmv_stdout(char const * name)"""
    return _cinit.set_nusmv_stdout(name)

def get_nusmv_stdout() -> "FILE *":
    """get_nusmv_stdout() -> FILE *"""
    return _cinit.get_nusmv_stdout()

def print_nusmv_stdout(fmt: 'char const *') -> "void":
    """print_nusmv_stdout(char const * fmt)"""
    return _cinit.print_nusmv_stdout(fmt)

def close_nusmv_stdout() -> "void":
    """close_nusmv_stdout()"""
    return _cinit.close_nusmv_stdout()

def save_nusmv_stderr() -> "void":
    """save_nusmv_stderr()"""
    return _cinit.save_nusmv_stderr()

def restore_nusmv_stderr() -> "void":
    """restore_nusmv_stderr()"""
    return _cinit.restore_nusmv_stderr()

def set_nusmv_stderr(name: 'char const *') -> "void":
    """set_nusmv_stderr(char const * name)"""
    return _cinit.set_nusmv_stderr(name)

def get_nusmv_stderr() -> "FILE *":
    """get_nusmv_stderr() -> FILE *"""
    return _cinit.get_nusmv_stderr()

def print_nusmv_stderr(fmt: 'char const *') -> "void":
    """print_nusmv_stderr(char const * fmt)"""
    return _cinit.print_nusmv_stderr(fmt)

def close_nusmv_stderr() -> "void":
    """close_nusmv_stderr()"""
    return _cinit.close_nusmv_stderr()

def nusmv_FREE(ptr: 'void *') -> "void":
    """nusmv_FREE(void * ptr)"""
    return _cinit.nusmv_FREE(ptr)

def get_preprocessor_call(name: 'char const *') -> "char *":
    """get_preprocessor_call(char const * name) -> char *"""
    return _cinit.get_preprocessor_call(name)

def get_preprocessor_filename(name: 'char const *') -> "char *":
    """get_preprocessor_filename(char const * name) -> char *"""
    return _cinit.get_preprocessor_filename(name)

def get_preprocessor_names() -> "char *":
    """get_preprocessor_names() -> char *"""
    return _cinit.get_preprocessor_names()

def get_preprocessors_num() -> "int":
    """get_preprocessors_num() -> int"""
    return _cinit.get_preprocessors_num()

def NuSMVCore_get_tool_name() -> "char *":
    """NuSMVCore_get_tool_name() -> char *"""
    return _cinit.NuSMVCore_get_tool_name()

def NuSMVCore_get_tool_rc_file_name() -> "char *":
    """NuSMVCore_get_tool_rc_file_name() -> char *"""
    return _cinit.NuSMVCore_get_tool_rc_file_name()

def NuSMVCore_set_tool_name(tool_name: 'char *') -> "void":
    """NuSMVCore_set_tool_name(char * tool_name)"""
    return _cinit.NuSMVCore_set_tool_name(tool_name)

def NuSMVCore_get_tool_version() -> "char *":
    """NuSMVCore_get_tool_version() -> char *"""
    return _cinit.NuSMVCore_get_tool_version()

def NuSMVCore_set_tool_version(tool_version: 'char *') -> "void":
    """NuSMVCore_set_tool_version(char * tool_version)"""
    return _cinit.NuSMVCore_set_tool_version(tool_version)

def NuSMVCore_get_build_date() -> "char *":
    """NuSMVCore_get_build_date() -> char *"""
    return _cinit.NuSMVCore_get_build_date()

def NuSMVCore_set_build_date(build_date: 'char *') -> "void":
    """NuSMVCore_set_build_date(char * build_date)"""
    return _cinit.NuSMVCore_set_build_date(build_date)

def NuSMVCore_get_prompt_string() -> "char *":
    """NuSMVCore_get_prompt_string() -> char *"""
    return _cinit.NuSMVCore_get_prompt_string()

def NuSMVCore_set_prompt_string(prompt_string: 'char *') -> "void":
    """NuSMVCore_set_prompt_string(char * prompt_string)"""
    return _cinit.NuSMVCore_set_prompt_string(prompt_string)

def NuSMVCore_get_email() -> "char *":
    """NuSMVCore_get_email() -> char *"""
    return _cinit.NuSMVCore_get_email()

def NuSMVCore_set_email(email: 'char *') -> "void":
    """NuSMVCore_set_email(char * email)"""
    return _cinit.NuSMVCore_set_email(email)

def NuSMVCore_get_website() -> "char *":
    """NuSMVCore_get_website() -> char *"""
    return _cinit.NuSMVCore_get_website()

def NuSMVCore_set_website(website: 'char *') -> "void":
    """NuSMVCore_set_website(char * website)"""
    return _cinit.NuSMVCore_set_website(website)

def NuSMVCore_get_bug_report_message() -> "char *":
    """NuSMVCore_get_bug_report_message() -> char *"""
    return _cinit.NuSMVCore_get_bug_report_message()

def NuSMVCore_set_bug_report_message(bug_report_message: 'char *') -> "void":
    """NuSMVCore_set_bug_report_message(char * bug_report_message)"""
    return _cinit.NuSMVCore_set_bug_report_message(bug_report_message)

def NuSMVCore_get_linked_addons() -> "char *":
    """NuSMVCore_get_linked_addons() -> char *"""
    return _cinit.NuSMVCore_get_linked_addons()

def NuSMVCore_set_linked_addons(linked_addons: 'char *') -> "void":
    """NuSMVCore_set_linked_addons(char * linked_addons)"""
    return _cinit.NuSMVCore_set_linked_addons(linked_addons)

def NuSMVCore_get_library_name() -> "char *":
    """NuSMVCore_get_library_name() -> char *"""
    return _cinit.NuSMVCore_get_library_name()

def NuSMVCore_get_library_version() -> "char *":
    """NuSMVCore_get_library_version() -> char *"""
    return _cinit.NuSMVCore_get_library_version()

def NuSMVCore_get_library_build_date() -> "char *":
    """NuSMVCore_get_library_build_date() -> char *"""
    return _cinit.NuSMVCore_get_library_build_date()

def NuSMVCore_get_library_email() -> "char *":
    """NuSMVCore_get_library_email() -> char *"""
    return _cinit.NuSMVCore_get_library_email()

def NuSMVCore_get_library_website() -> "char *":
    """NuSMVCore_get_library_website() -> char *"""
    return _cinit.NuSMVCore_get_library_website()

def NuSMVCore_get_library_bug_report_message() -> "char *":
    """NuSMVCore_get_library_bug_report_message() -> char *"""
    return _cinit.NuSMVCore_get_library_bug_report_message()

def NuSMVCore_set_banner_print_fun(banner_print_fun: 'void (*)(FILE *)') -> "void":
    """NuSMVCore_set_banner_print_fun(void (*)(FILE *) banner_print_fun)"""
    return _cinit.NuSMVCore_set_banner_print_fun(banner_print_fun)

def NuSMVCore_set_batch_fun(batch_fun: 'void (*)(void)') -> "void":
    """NuSMVCore_set_batch_fun(void (*)(void) batch_fun)"""
    return _cinit.NuSMVCore_set_batch_fun(batch_fun)

def NuSMVCore_add_env_command_line_option(name: 'char *', usage: 'char *', parameter: 'char *', env_var: 'char *', is_deprecated: 'boolean', is_public: 'boolean', dependency: 'char *', conflict: 'char *') -> "void":
    """NuSMVCore_add_env_command_line_option(char * name, char * usage, char * parameter, char * env_var, boolean is_deprecated, boolean is_public, char * dependency, char * conflict)"""
    return _cinit.NuSMVCore_add_env_command_line_option(name, usage, parameter, env_var, is_deprecated, is_public, dependency, conflict)

def NuSMVCore_add_command_line_option(name: 'char *', usage: 'char *', parameter: 'char *', check_and_apply: 'boolean (*)(OptsHandler_ptr,char *)', is_deprecated: 'boolean', is_public: 'boolean', dependency: 'char *', conflict: 'char *') -> "void":
    """NuSMVCore_add_command_line_option(char * name, char * usage, char * parameter, boolean (*)(OptsHandler_ptr,char *) check_and_apply, boolean is_deprecated, boolean is_public, char * dependency, char * conflict)"""
    return _cinit.NuSMVCore_add_command_line_option(name, usage, parameter, check_and_apply, is_deprecated, is_public, dependency, conflict)

def NuSMVCore_init_data() -> "void":
    """NuSMVCore_init_data()"""
    return _cinit.NuSMVCore_init_data()

def NuSMVCore_init_cmd_options() -> "void":
    """NuSMVCore_init_cmd_options()"""
    return _cinit.NuSMVCore_init_cmd_options()

def NuSMVCore_init(fns: 'FP_V_V [][2]', arg2: 'int') -> "void":
    """NuSMVCore_init(FP_V_V [][2] fns, int arg2)"""
    return _cinit.NuSMVCore_init(fns, arg2)

def NuSMVCore_main(argc: 'int', argv: 'char **', status: 'int *') -> "boolean":
    """NuSMVCore_main(int argc, char ** argv, int * status) -> boolean"""
    return _cinit.NuSMVCore_main(argc, argv, status)

def NuSMVCore_reset() -> "void":
    """NuSMVCore_reset()"""
    return _cinit.NuSMVCore_reset()

def NuSMVCore_quit() -> "void":
    """NuSMVCore_quit()"""
    return _cinit.NuSMVCore_quit()
# This file is compatible with both classic and new-style classes.

cvar = _cinit.cvar

