
--- Auto-generated model of a simple card game with 3 cards.
---
--- Simon Busard <simon.busard@uclouvain.be>, 03/09/13

MODULE DEALER(step, stack)
    
    IVAR action: {0, 1, 2, 3};
    
    VAR state: {0, 1, 2, 3};
    
    INIT state = 0
    
    --- Protocol
    
TRANS
action in case step < 3 | (step = 3 & stack != s) :
case stack = s1_2 : {1,2};
stack = s1_3 : {1,3};
stack = s2_3 : {2,3};
stack = s1 : {1};
stack = s2 : {2};
stack = s3 : {3};
stack = s1_2_3 : {1,2,3};
TRUE: {0,1,2,3};
esac;
step = 4 | (step = 3 & stack = s) : {0};
TRUE: {0,1,2,3};
esac

              
    --- Evolution
    --- Defined in environment

MODULE PLAYER(step, emptystack)
    
    IVAR action: {keep, change, none};
    
    VAR state: {0, 1, 2, 3};
    
    INIT state = 0
    
    --- Protocol
    
TRANS
action in case step != 3 | emptystack : {none};
               step = 3 : {keep, change};
          esac

              
    --- Evolution
    --- Defined in environment

MODULE main
    VAR dealer : DEALER(step, stack);
        player : PLAYER(step, stack = s);
        stack  : {s1_2,s1_3,s2_3,s1,s2,s,s3,s1_2_3};
        step   : 1..4;
        
    INIT step = 1 & stack = s1_2_3
        
    TRANS
    next(dealer.state) = case step = 1 : dealer.action;
                              step = 4 : 0;
                              TRUE     : dealer.state;
                         esac
                         
    TRANS
    next(player.state) in case step = 2 : dealer.action;
                               step = 3 & player.action = change: dealer.action;
                               step = 4 : 0;
                               TRUE     : player.state;
                          esac
                          
    TRANS
    next(step) = (
                  (step = 3 & player.action = change & stack != s) ?
                  step :
                  ((step mod 4) + 1))
                          
    
TRANS
next(stack) = case step < 4:
case stack = s2_3 & dealer.action = 2 : s3;
stack = s1_3 & dealer.action = 3 : s1;
stack = s2_3 & dealer.action = 3 : s2;
stack = s1_2_3 & dealer.action = 3 : s1_2;
stack = s1 & dealer.action = 1 : s;
stack = s1_2 & dealer.action = 1 : s2;
stack = s1_2 & dealer.action = 2 : s1;
stack = s1_2_3 & dealer.action = 1 : s2_3;
stack = s2 & dealer.action = 2 : s;
stack = s1_3 & dealer.action = 1 : s3;
stack = s3 & dealer.action = 3 : s;
stack = s1_2_3 & dealer.action = 2 : s1_3;
TRUE : stack;
esac;
step = 4: s1_2_3;
esac


DEFINE
playerwins := step = 4 & (dealer.state < player.state | dealer.state = 3 & player.state = 1) & !(dealer.state = 1 & player.state = 3);
dealerwins := step = 4 & (player.state < dealer.state | dealer.state = 1 & player.state = 3) & !(player.state = 1 & dealer.state = 3);

